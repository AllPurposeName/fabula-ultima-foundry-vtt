var __getOwnPropNames=Object.getOwnPropertyNames;var __esm=(fn,res)=>function(){return fn&&(res=(0,fn[__getOwnPropNames(fn)[0]])(fn=0)),res};var define_GLOBALPATHS_default,init_define_GLOBALPATHS=__esm({"<define:GLOBALPATHS>"(){define_GLOBALPATHS_default=["systems/fabula-ultima/templates/actor/character/sheets-tabs/classes-tab.hbs","systems/fabula-ultima/templates/actor/character/sheets-tabs/main-tab.hbs","systems/fabula-ultima/templates/actor/character/sheet.hbs","systems/fabula-ultima/templates/item/class/sheet.hbs"]}});var foundry_scripts_exports={};var init_foundry_scripts=__esm({"src/tests/foundry-scripts/index.js"(){init_define_GLOBALPATHS()}});init_define_GLOBALPATHS();init_define_GLOBALPATHS();var FabulaUltima={};FabulaUltima.attributes=["dexterity","insight","might","willpower"];FabulaUltima.characterSubtype={pc:"ACTOR.SUBTYPE.PC",npc:"ACTOR.SUBTYPE.NPC"};FabulaUltima.attributeDice={1:"1d6",2:"1d8",3:"1d10",4:"1d12"};FabulaUltima.conditions=["dazed","enraged","poisoned","shaken","slow","weak"];FabulaUltima.dataSetConfig={en:"dataset-en"};FabulaUltima.i18n={dexterity:"ATTRIBUTE.DEXTERITY",insight:"ATTRIBUTE.WILLPOWER",might:"ATTRIBUTE.MIGHT",willpower:"ATTRIBUTE.INSIGHT"};FabulaUltima.itemTypes=["bond","class"];var config_default=FabulaUltima;init_define_GLOBALPATHS();init_define_GLOBALPATHS();function localizeString(string){string||console.log("No string passed");try{let localeString=CONFIG.fabulaUltima.i18n[string];return localeString||(localeString=string),game.i18n.localize(localeString)}catch(error){return console.log(`Failed to localize string: ${string}. Error: `,error),string}}var FabulaUltimaActor=class extends Actor{get actorProperties(){return this.system}get attributes(){return this.actorProperties.baseAttribute}get dexterity(){return this.modifiedAttribute({baseAttribute:"baseDexterity",possibleStatusEffects:["slow","enraged"]})}get insight(){return this.modifiedAttribute({baseAttribute:"baseInsight",possibleStatusEffects:["dazed","enraged"]})}get might(){return this.modifiedAttribute({baseAttribute:"baseMight",possibleStatusEffects:["weak","poisoned"]})}get willpower(){return this.modifiedAttribute({baseAttribute:"baseWillpower",possibleStatusEffects:["shaken","poisoned"]})}modifiedAttribute({baseAttribute,possibleStatusEffects}){let baseValue=this.actorProperties.baseAttribute[baseAttribute].value,activeStatusEffects=possibleStatusEffects.filter(effect=>this.actorProperties.condition[effect].value).length;return Math.max(6,baseValue-2*activeStatusEffects)}get conditions(){return this.actorProperties.condition}get bio(){return this.actorProperties.bio}};init_define_GLOBALPATHS();init_define_GLOBALPATHS();var FabulaUltimaItem=class extends Item{get itemProperties(){return this.system}};init_define_GLOBALPATHS();function preloadHandlebarsTemplates(){let templatePaths=define_GLOBALPATHS_default;return loadTemplates(templatePaths)}function registerHandlebarsHelpers(){Handlebars.registerHelper("skulls",function(current,max,block){for(var acc="",i=0;i<max;++i)block.data.index=i,block.data.damaged=i>=current,acc+=block.fn(this);return acc}),Handlebars.registerHelper("flps_enrich",function(content){return content=TextEditor.enrichHTML(content,{documents:!0,async:!1}),new Handlebars.SafeString(content)}),Handlebars.registerHelper("flps_capitalize",function(value){return typeof value=="string"&&value.length>0?value[0].toUpperCase()+value.slice(1):value}),Handlebars.registerHelper("flps_strconcat",function(){let args=Array.prototype.slice.call(arguments);return args.pop(),args.join("")}),Handlebars.registerHelper("damageType",function(type){switch(type=normalize(type,"blunt"),type){case"blunt":return game.i18n.localize("ATTACK.BLUNT");case"fear":return game.i18n.localize("ATTACK.FEAR");case"slash":return game.i18n.localize("ATTACK.SLASH");case"stab":return game.i18n.localize("ATTACK.STAB");case"other":return game.i18n.localize("ATTACK.OTHER")}}),Handlebars.registerHelper("armorPart",function(part){switch(part=normalize(part,"body"),part){case"body":return game.i18n.localize("ARMOR.BODY");case"head":return game.i18n.localize("ARMOR.HELMET");case"shield":return game.i18n.localize("ARMOR.SHIELD")}}),Handlebars.registerHelper("itemWeight",function(weight){switch(normalize(weight,"regular")){case"none":return game.i18n.localize("WEIGHT.NONE");case"tiny":return game.i18n.localize("WEIGHT.TINY");case"light":return game.i18n.localize("WEIGHT.LIGHT");case"regular":return game.i18n.localize("WEIGHT.REGULAR");case"heavy":return game.i18n.localize("WEIGHT.HEAVY");default:return weight}}),Handlebars.registerHelper("weaponCategory",function(category){switch(category=normalize(category,"melee"),category){case"melee":return game.i18n.localize("WEAPON.MELEE");case"ranged":return game.i18n.localize("WEAPON.RANGED")}}),Handlebars.registerHelper("weaponGrip",function(grip){switch(grip=normalize(grip,"1h"),grip){case"1h":return game.i18n.localize("WEAPON.1H");case"2h":return game.i18n.localize("WEAPON.2H")}}),Handlebars.registerHelper("weaponRange",function(range){switch(range=normalize(range,"arm"),range){case"arm":return game.i18n.localize("RANGE.ARM");case"near":return game.i18n.localize("RANGE.NEAR");case"short":return game.i18n.localize("RANGE.SHORT");case"long":return game.i18n.localize("RANGE.LONG");case"distant":return game.i18n.localize("RANGE.DISTANT")}}),Handlebars.registerHelper("talentType",function(type){switch(type=normalize(type,"general"),type){case"general":return game.i18n.localize("TALENT.GENERAL");case"kin":return game.i18n.localize("TALENT.KIN");case"profession":return game.i18n.localize("TALENT.PROFESSION")}}),Handlebars.registerHelper("isBroken",function(item){return parseInt(item.system.bonus.max,10)>0&&parseInt(item.system.bonus.value,10)===0?"broken":""}),Handlebars.registerHelper("formatRollModifiers",function(rollModifiers){let output=[];return Object.values(rollModifiers).filter(mod=>!mod.gearBonus).forEach(mod=>{let modName=game.i18n.localize(mod.name);output.push(`${modName} ${mod.value}`)}),output.join(", ")}),Handlebars.registerHelper("hasWeaponFeatures",function(weaponType,features){let meleeFeatures=["edged","pointed","blunt","parry","hook"],rangedFeatures=["slowReload"];if(features.others!=="")return!0;let weaponFeatures=[];weaponType==="melee"?weaponFeatures=meleeFeatures:weaponType==="ranged"&&(weaponFeatures=rangedFeatures);for(let feature in features)if(weaponFeatures.includes(feature)&&features[feature])return!0;return!1}),Handlebars.registerHelper("formatWeaponFeatures",function(weaponType,features){let output=[];return weaponType==="melee"?(features.edged&&output.push(game.i18n.localize("WEAPON.FEATURES.EDGED")),features.pointed&&output.push(game.i18n.localize("WEAPON.FEATURES.POINTED")),features.blunt&&output.push(game.i18n.localize("WEAPON.FEATURES.BLUNT")),features.parrying&&output.push(game.i18n.localize("WEAPON.FEATURES.PARRYING")),features.hook&&output.push(game.i18n.localize("WEAPON.FEATURES.HOOK"))):weaponType==="ranged"?features.slowReload&&output.push(game.i18n.localize("WEAPON.FEATURES.SLOW_RELOAD")):features.others?output.push(features.others):features&&output.push(features),output.join(", ")}),Handlebars.registerHelper("plaintextToHTML",function(value){return new Handlebars.SafeString(value.replace(/(<([^>]+)>)/gi,"").replace(/(?:\r\n|\r|\n)/g,"<br/>"))}),Handlebars.registerHelper("toUpperCase",function(str){return str.toUpperCase()}),Handlebars.registerHelper("eq",function(){let args=Array.prototype.slice.call(arguments,0,-1);return args.every(function(expression){return args[0]===expression})}),Handlebars.registerHelper("or",function(){return Array.prototype.slice.call(arguments,0,-1).reduce((x,y)=>x||y)}),Handlebars.registerHelper("and",function(){return Array.prototype.slice.call(arguments,0,-1).reduce((x,y)=>x&&y)}),Handlebars.registerHelper("chargenLoc",function(item){let localizedString=CONFIG.fbl.i18n[item];return localizedString||(localizedString=`SKILL.${item.toUpperCase().replace(/[\s-]/g,"_")}`),localizedString}),Handlebars.registerHelper("getType",function(item){return typeof(Number(item)||item)}),Handlebars.registerHelper("randomize",items=>items[Math.floor(Math.random()*items.length)]),Handlebars.registerHelper("fblLocalize",function(...args){return args.pop(),localizeString(args.join("."))}),Handlebars.registerHelper("ternary",function(conditional,string1,string2){return conditional?string1:string2}),Handlebars.registerHelper("count",function(array=[]){return Array.isArray(array)?array.length:0})}function normalize(data,defaultValue){return data?data.toLowerCase():defaultValue}var initializeHandlebars=()=>{registerHandlebarsHelpers(),preloadHandlebarsTemplates()};init_define_GLOBALPATHS();init_define_GLOBALPATHS();init_define_GLOBALPATHS();var FabulaUltimaActorSheet=class extends ActorSheet{};var FabulaUltimaCharacterSheet=class extends FabulaUltimaActorSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["fabula-ultima","sheet","actor"],width:660,height:740,resizable:!1,scrollY:[".armors .item-list .items",".critical-injuries .item-list .items",".gears .item-list .items",".spells .item-list .items",".talents .item-list .items",".weapons .item-list .items"],tabs:[{navSelector:".sheet-tabs",contentSelector:".sheet-body",initial:"main"}]})}get template(){return"systems/fabula-ultima/templates/actor/character/sheet.hbs"}async getData(){return await super.getData()}};init_define_GLOBALPATHS();init_define_GLOBALPATHS();var FabulaUltimaItemSheet=class extends ItemSheet{};var FabulaUltimaClassSheet=class extends FabulaUltimaItemSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["fabula-ultima","sheet","item"],width:660,height:740,resizable:!1})}get template(){return"systems/fabula-ultima/templates/item/class/sheet.hbs"}async getData(){return await super.getData()}};function registerSheets(){Actors.unregisterSheet("core",ActorSheet),Actors.registerSheet("fabula-ultima",FabulaUltimaCharacterSheet,{types:["character"],makeDefault:!0})}Items.registerSheet("fabula-ultima",FabulaUltimaClassSheet,{types:["class"],makeDefault:!0});(async()=>{CONFIG.debug.hooks=!0;let tests=await Promise.resolve().then(()=>(init_foundry_scripts(),foundry_scripts_exports));CONFIG.debug.tests=tests.default,console.warn("HOOKS DEBUG ENABLED: ",CONFIG.debug.hooks)})();Hooks.once("init",()=>{game.fbl={config:config_default},CONFIG.Actor.documentClass=FabulaUltimaActor,CONFIG.fabula=config_default,CONFIG.Item.documentClass=FabulaUltimaItem,registerSheets(),initializeHandlebars()});
//# sourceMappingURL=data:application/json;base64,
